<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>技术笔记</title>
        <subtitle>幸好有你雯</subtitle>
        <icon>https://fallingkids.github.io/images/favicon.ico</icon>
        <link>https://fallingkids.github.io</link>
        <author>
          <name>彼得仔</name>
        </author>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 01 Jun 2022 10:50:55 +0800</pubDate>
        <lastBuildDate>Wed, 01 Jun 2022 10:50:55 +0800</lastBuildDate>
        <category term="node.js" />
        <category term="golang" />
        <category term="mysql" />
        <category term="linux" />
        <item>
            <guid isPermalink="true">https://fallingkids.github.io/%E4%B8%80%E5%91%A8%E6%B5%85%E8%B0%88%EF%BC%9AMysql%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid>
            <title>一周浅谈：Mysql整体架构设计</title>
            <link>https://fallingkids.github.io/%E4%B8%80%E5%91%A8%E6%B5%85%E8%B0%88%EF%BC%9AMysql%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link>
            <category term="Mysql" scheme="https://fallingkids.github.io/tags/Mysql/" />
            <pubDate>Wed, 01 Jun 2022 10:50:55 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近刚开始再看《Mysql是怎样运行的 –从根儿上理解MySQL》，迫于见明的压力，在此开始写一些笔记也好或者对于该书获取的一些知识点提炼出来&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;架构图&#34;&gt;&lt;a href=&#34;#架构图&#34; class=&#34;headerlink&#34; title=&#34;架构图&#34;&gt;&lt;/a&gt;架构图&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;https://res.cloudinary.com/https-fallingkids-github-io/image/upload/v1654054743/blog/2022-06-01/image_qvugqu.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;建立连接&lt;/p&gt;
&lt;p&gt;就跟大部分的开源组件的模式一样，client和server。client具体为api，在不同的应用方进行调用；server具体实现业务如存储，查询，分词等一些逻辑。当然，client与server之间的连接是有通过我们熟悉的tcp连接，还有命名管道和共享内存，UNIX域套接字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解析与优化&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;mysql服务器从客户端那获得了文本形式的请求，接下来数据要从存储中取出来，还需要很多前置的过程，比如：要取什么数据（对于sql语句需要做出分析传递给下一层），怎么取是最快，这部分做这件事情&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;存储引擎&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当服务完成了查询优化以后，都还没有真正地去访问真实的表中数据（在查询期间可能会访问表中少量的数据）。因此，mysql服务器把数据的存储和提取操作都封装到存储引擎模块（表处理器）中。从逻辑上，表示一行一行的记录组成。在物理上，如何表示记录，怎么读取记录，把数据写入具体的物理存储器，这些都存储引擎负责的事情。同时存储引擎是各种各样的，可以根据用户自己选择去使用，因此作为开发者的我们可以自己开发一套存储引擎去使用&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;建立连接&#34;&gt;&lt;a href=&#34;#建立连接&#34; class=&#34;headerlink&#34; title=&#34;建立连接&#34;&gt;&lt;/a&gt;建立连接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;TCP/IP&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在真实的环境中，数据库服务器进程和客户端进程可能会运行在不同的主机中，因此必须网络进行通讯。mysql服务器中默认的端口号是3306，默认监听3306端口。因此我们就可以通过IP地址+端口号的方式与这个进程建立连接，这样进程间就可以进行网络通讯。下面一些关于网络连接用到的指令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysqld -P3307
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;mysql -h127.0.0.1 -uroot -P3307 -p
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;命名管道和共享内存&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;windows用户可以用这招，我就不细了解 &lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;UNIX域套接字&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务器进程和客户端进程都运行在操作系统为类UNIX的同一台机器上，就可以使用这个方法进行进程间通讯。不细聊了&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;连接管理&#34;&gt;&lt;a href=&#34;#连接管理&#34; class=&#34;headerlink&#34; title=&#34;连接管理&#34;&gt;&lt;/a&gt;连接管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;线程池&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当每有一个客户端进程连接到服务器进程时，服务器进程都会创建一个线程专门处理这个客户端的交互：当该客户端退出时会与服务器断开连接，服务器并不会直接把和客户端交互建立起来的线程销毁，而是把他缓存起来，当另一个新的客户端再进行连接时，把这个缓存的线程分配给新客户端。这样就避免了频繁创建和销毁线程，节省开销。mysql服务器是为每一个进来的客户端分配一个线程，这样的问题就会有，加入线程分配的太多就会严重影响系统性能，所以我们也需要限制可以同时连接到服务器的客户端数量，也就是我们日常口中经常提到的连接池，mysql也把这个字段开放出来，让我们来配置，因此这个配置的数值很考验开发者对我们的机器资源以及需要什么样的性能要有一个很深刻的理解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身份认证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当客户端发起连接时，是会携带主机信息、用户名、密码等信息，服务器程序就会对客户端提供的这些信息进行认证。如果认证失败，服务器就会拒绝连接。同时，当客户端与服务器是部署在不同的地方，可以采用传输层安全性协议对连接进行加密&lt;/p&gt;
&lt;h2 id=&#34;解析与优化&#34;&gt;&lt;a href=&#34;#解析与优化&#34; class=&#34;headerlink&#34; title=&#34;解析与优化&#34;&gt;&lt;/a&gt;解析与优化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;查询缓存（5.7.20以后不推荐使用，8.0中直接将其删除）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我在平时开发的过程中，当缓存中没有数据时，一次数据获取都从调用BI的数据接口来获取。但是为了提高效率，会把刚刚查询的结果放入缓存中，这样在短时间内再查询一次就能提高查询的效率，不需要做过多的计算。mysql也是如此，但是mysql对于两个查询请求有任何字符上面的不同（例如，空格、注释、大小写），都会导致缓存不会命中。另外，查询中包含某些函数、用户自定义变量和函数、系统表，如mysql、information_schema、performance_schema数据库中的表，这个请求也不会命中。当然，缓存也会有缓存失效的时候，只要表的结构或者发生了更改或者数据发生了修改，对应的所有缓存表全部失效&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;语法解析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们知道客户端程序发送过来的请求指示一段文本，mysql服务器首先要对这段文本进行分析。属于编译过程了，设计词法解析、语法解析、语义分析，不深聊了&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;p&gt;查询优化&lt;/p&gt;
&lt;p&gt;  语法解析之后，服务器已经获得了需要的信息（要查询的表和列是哪些、搜索条件是什么）。但是我们写的mysql语句执行起来效率可能并不是那么高，所以mysql的优化程序会对我们的语句做一些优化，优化结果就是生成一个执行计划（explain），这个执行计划表明了应该用哪些索引执行查询，以及表之间额查询顺序是啥，等等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;存储引擎&#34;&gt;&lt;a href=&#34;#存储引擎&#34; class=&#34;headerlink&#34; title=&#34;存储引擎&#34;&gt;&lt;/a&gt;存储引擎&lt;/h2&gt;&lt;p&gt;mysql服务器把数据的存储和提取操作都封装到了一个名为存储引擎的模块中，mysql中有很多存储引擎，但是最常用的还是InnoDB，偶尔用一下MyISAM，再偶尔用一下MEMORY&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;支持事务、行级别、外键&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MyISAM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要的非事务处理存储引擎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MEMORY&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据只存储在内存，不存储在磁盘；多用于临时表&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;本来想写第二章的内容，启动选项和系统变量，但是发现感觉不是很有必要，后面有必要再补上&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://fallingkids.github.io/hello-world/</guid>
            <title>Hello World</title>
            <link>https://fallingkids.github.io/hello-world/</link>
            <pubDate>Tue, 31 May 2022 15:28:50 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;Quick-Start&#34;&gt;&lt;a href=&#34;#Quick-Start&#34; class=&#34;headerlink&#34; title=&#34;Quick Start&#34;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&#34;Create-a-new-post&#34;&gt;&lt;a href=&#34;#Create-a-new-post&#34; class=&#34;headerlink&#34; title=&#34;Create a new post&#34;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Run-server&#34;&gt;&lt;a href=&#34;#Run-server&#34; class=&#34;headerlink&#34; title=&#34;Run server&#34;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Generate-static-files&#34;&gt;&lt;a href=&#34;#Generate-static-files&#34; class=&#34;headerlink&#34; title=&#34;Generate static files&#34;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Deploy-to-remote-sites&#34;&gt;&lt;a href=&#34;#Deploy-to-remote-sites&#34; class=&#34;headerlink&#34; title=&#34;Deploy to remote sites&#34;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
