{
    "version": "https://jsonfeed.org/version/1",
    "title": "技术笔记",
    "subtitle": "幸好有你雯",
    "icon": "https://fallingkids.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://fallingkids.github.io",
    "items": [
        {
            "id": "https://fallingkids.github.io/mysql-note-03/",
            "url": "https://fallingkids.github.io/mysql-note-03/",
            "title": "一周浅谈：InnoDB记录存储结构",
            "date_published": "2022-06-05T14:51:18.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>之前的文章，mysql 对于我们来说还只是一个 “黑盒”，我们只负责使用客户端发送请求，并且等待服务器返回结果。但是我们现在需要去搞清楚三个问题：</p>\n<ul>\n<li>表中的数据存到哪里（where）</li>\n<li>存放格式（what）</li>\n<li>mysql 以书面方式来访问数据（how）</li>\n</ul>\n<p>接下来，我就重点总结一下 mysql 默认的存储引擎 InnoDB，其他存储引擎的设计思路也大差不差，只不过特性不同罢了，设计思路差不多</p>\n<hr />\n<h2 id=\"innodb页简介\"><a class=\"anchor\" href=\"#innodb页简介\">#</a> InnoDB 页简介</h2>\n<p>InnoDB 是一个将表中的数据存储到磁盘上的存储引擎，即使我们关闭并且重启服务器，数据还是存在的。而真正处理数据的过程发生在内存中，所以是要把磁盘中的数据加载到内存中。如果是处理写入或修改请求，就还需要把内存中的内容刷新到磁盘上。</p>\n<hr />\n<h2 id=\"innodb行格式\"><a class=\"anchor\" href=\"#innodb行格式\">#</a> InnoDB 行格式</h2>\n<p>我们平时都是以记录为单位向表中插入数据的，这些记录在磁盘中的<strong>存放形式</strong>也被称为<strong>行格式或者记录格式</strong>。InnoDB 的设计者设计了 4 中不同类型的行格式：</p>\n<ul>\n<li>COMPACT</li>\n<li>REDUNDANT</li>\n<li>DYNAMIC</li>\n<li>COMPRESSED</li>\n</ul>\n<h3 id=\"指定行格式的语法\"><a class=\"anchor\" href=\"#指定行格式的语法\">#</a> 指定行格式的语法</h3>\n<p>可以在<strong>创建</strong>或者<strong>修改</strong>表的语句中指定记录所使用的的行格式：</p>\n<pre><code>CREATE TABLE 表名 （列的信息） ROW_FORMAT=行格式名称;\nALTER TABLE 表名 ROW_FORMAT=行格式名称;\n</code></pre>\n<p>为了探究接下来各个行格式下的数据结构到底有啥不同，所以假设在 test_db 中创建一张表 record_format_demo，同时指定它的行格式</p>\n<pre><code>mysql&gt; CREATE TABLE record_format_demo (\n    -&gt;     c1 VARCHAR(10),\n    -&gt;\t\t c2 VARCHAR(10) NOT NULL,\n    -&gt;\t\t c3 CHAR(10),\n    -&gt;     c4 VARCHAR(10),\n    -&gt; ) CHARSET=ascii ROW_FORMAT=COMPACT;\n    Query OK, 0 rows affected (0. 03 sec)\n</code></pre>\n<p>这张表的行格式是 COMPACT，林外，我们还显式指定了字符集为 ascii（因为 ascii 字符集只包含空格、标点符号、数字、大小写字母和一些不可见字符，所以汉字不能存到这张表中）现在我向表中插入两条记录：</p>\n<pre><code>mysql&gt; INSERT INTO record_format_demo(c1, c2, c3, c4) VALUES ('aaaa', 'bbb', 'cc', 'd'), ('eeee', 'fff', NULL, NULL);\nQuery ok, 2 rows affected (0.02 sec)\nRecords: 2 Duplicates: 0 Warnings: 0\n</code></pre>\n<p>现在表中的记录是这个样子的：</p>\n<pre><code>mysql&gt; SELECT * FROM record_format_demo;\n+------+-----+------+------+\n| c1   | c2  | c3   | c4   |\n+------+-----+------+------+\n| aaaa | bbb | cc   | d    |\n| eeee | fff | NULL | NULL |\n+------+-----+------+------+\n2 rows in set (0.00 sec)\n</code></pre>\n<p>现在可以看看每个行格式下的存储结构到底有啥不同</p>\n<h3 id=\"compact行格式\"><a class=\"anchor\" href=\"#compact行格式\">#</a> COMPACT 行格式</h3>\n<p><img data-src=\"https://res.cloudinary.com/https-fallingkids-github-io/image/upload/v1654441308/blog/2022-06-05/mysql-not-03-img1_lzdbrr.jpg\" alt=\"\" /><br />\nCOMPACT 行格式示意图</p>\n<ol>\n<li>记录的额外信息</li>\n</ol>\n<p>这部分信息是服务器为了更好地管理记录而不得不额外添加的一些信息。这些额外信息分为 3 个部分，分别是变长字段长度列表、NULL 值列表和记录头信息。</p>\n<ol>\n<li>变长字段长度列表</li>\n</ol>\n<p>mysql 支持一些变长的数据类型，比如 VARCHAR (M)、VARBINARY (M)、各种 TEXT 类型、各种 BLOB 类型。这些数据类型的列称为变长字段。因为变长字段中存储多少字节的数据是不固定的，所以我们在存储真实数据的时候需要顺便把这些数据占用的字节数也存起来，这样才不至于吧 mysql 服务器高懵逼，所以总结来说这些变长字段占用的存储空间分为两部分：</p>\n<ul>\n<li>真正的数据内容</li>\n<li>该数据占用的字节数</li>\n</ul>\n<p>在 COMPACT 行格式中，所有变长字段的真实数据占用的字节数都存放在记录的开头位置，从而形成一个变长字段长度列表，各边长字段的真实数据占用的字节数按照列的顺序<strong>逆序</strong>存放。<br />\n以 record_format_demo 表中第一条记录来举个例子，因为 record_format_demo 表中的 c1、c2、c4 列都是 VARCHAR (10) 类型的，也就是变长的数据类型所以，所以这 3 个列的值占用的存储空间按字节数都需要保存在记录开头处。看下第一条记录各变长字段内容的长度</p>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>存储内容</th>\n<th>内容长度（十进制表示）</th>\n<th>内容长度（十六进制表示）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c1</td>\n<td>'aaaa'</td>\n<td>4</td>\n<td>0x04</td>\n</tr>\n<tr>\n<td>c2</td>\n<td>'bbb'</td>\n<td>3</td>\n<td>0x03</td>\n</tr>\n<tr>\n<td>c4</td>\n<td>'d'</td>\n<td>1</td>\n<td>0x01</td>\n</tr>\n</tbody>\n</table>\n<p>因为这些长度值需要按照列的顺序逆序存放，所以最后变长字段长度列表的字节串用十六进制的表示的效果就是：<br />\n01 03 04<br />\n 需要说明的是，这里各个字节之间实际上没有空格，只是为了更好理解罢了。<br />\n把这个字节串组成的变长字段长度列表填入到<strong> COMPACT 行格式示意图</strong>的效果如下图所示。<br />\n<img data-src=\"https://res.cloudinary.com/https-fallingkids-github-io/image/upload/v1654441308/blog/2022-06-05/mysql-note-03-img2_rpi0ux.jpg\" alt=\"\" /><br />\n第一条记录的存储格式</p>\n<ol start=\"2\">\n<li></li>\n<li>\n<p>记录的真实数据</p>\n</li>\n</ol>\n<hr />\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "https://fallingkids.github.io/%E4%B8%80%E5%91%A8%E6%B5%85%E8%B0%88%EF%BC%9AInnoDB%E8%AE%B0%E5%BD%95%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/",
            "url": "https://fallingkids.github.io/%E4%B8%80%E5%91%A8%E6%B5%85%E8%B0%88%EF%BC%9AInnoDB%E8%AE%B0%E5%BD%95%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/",
            "title": "",
            "date_published": "2022-06-05T14:50:55.246Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>之前的文章，mysql 对于我们来说还只是一个 “黑盒”，我们只负责使用客户端发送请求，并且等待服务器返回结果。但是我们现在需要去搞清楚三个问题：</p>\n<ul>\n<li>表中的数据存到哪里（where）</li>\n<li>存放格式（what）</li>\n<li>mysql 以书面方式来访问数据（how）</li>\n</ul>\n<p>接下来，我就重点总结一下 mysql 默认的存储引擎 InnoDB，其他存储引擎的设计思路也大差不差，只不过特性不同罢了，设计思路差不多</p>\n<hr />\n<h2 id=\"innodb页简介\"><a class=\"anchor\" href=\"#innodb页简介\">#</a> InnoDB 页简介</h2>\n<p>InnoDB 是一个将表中的数据存储到磁盘上的存储引擎，即使我们关闭并且重启服务器，数据还是存在的。而真正处理数据的过程发生在内存中，所以是要把磁盘中的数据加载到内存中。如果是处理写入或修改请求，就还需要把内存中的内容刷新到磁盘上。</p>\n<hr />\n<h2 id=\"innodb行格式\"><a class=\"anchor\" href=\"#innodb行格式\">#</a> InnoDB 行格式</h2>\n<p>我们平时都是以记录为单位向表中插入数据的，这些记录在磁盘中的<strong>存放形式</strong>也被称为<strong>行格式或者记录格式</strong>。InnoDB 的设计者设计了 4 中不同类型的行格式：</p>\n<ul>\n<li>COMPACT</li>\n<li>REDUNDANT</li>\n<li>DYNAMIC</li>\n<li>COMPRESSED</li>\n</ul>\n<h3 id=\"指定行格式的语法\"><a class=\"anchor\" href=\"#指定行格式的语法\">#</a> 指定行格式的语法</h3>\n<p>可以在<strong>创建</strong>或者<strong>修改</strong>表的语句中指定记录所使用的的行格式：</p>\n<pre><code>CREATE TABLE 表名 （列的信息） ROW_FORMAT=行格式名称;\nALTER TABLE 表名 ROW_FORMAT=行格式名称;\n</code></pre>\n<p>为了探究接下来各个行格式下的数据结构到底有啥不同，所以假设在 test_db 中创建一张表 record_format_demo，同时指定它的行格式</p>\n<pre><code>mysql&gt; CREATE TABLE record_format_demo (\n    -&gt;     c1 VARCHAR(10),\n    -&gt;\t\t c2 VARCHAR(10) NOT NULL,\n    -&gt;\t\t c3 CHAR(10),\n    -&gt;     c4 VARCHAR(10),\n    -&gt; ) CHARSET=ascii ROW_FORMAT=COMPACT;\n    Query OK, 0 rows affected (0. 03 sec)\n</code></pre>\n<p>这张表的行格式是 COMPACT，林外，我们还显式指定了字符集为 ascii（因为 ascii 字符集只包含空格、标点符号、数字、大小写字母和一些不可见字符，所以汉字不能存到这张表中）现在我向表中插入两条记录：</p>\n<pre><code>mysql&gt; INSERT INTO record_format_demo(c1, c2, c3, c4) VALUES ('aaaa', 'bbb', 'cc', 'd'), ('eeee', 'fff', NULL, NULL);\nQuery ok, 2 rows affected (0.02 sec)\nRecords: 2 Duplicates: 0 Warnings: 0\n</code></pre>\n<p>现在表中的记录是这个样子的：</p>\n<pre><code>mysql&gt; SELECT * FROM record_format_demo;\n+------+-----+------+------+\n| c1   | c2  | c3   | c4   |\n+------+-----+------+------+\n| aaaa | bbb | cc   | d    |\n| eeee | fff | NULL | NULL |\n+------+-----+------+------+\n2 rows in set (0.00 sec)\n</code></pre>\n<p>现在可以看看每个行格式下的存储结构到底有啥不同</p>\n<h3 id=\"compact行格式\"><a class=\"anchor\" href=\"#compact行格式\">#</a> COMPACT 行格式</h3>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/2349795/1654414563605-d21d3ee3-1534-4408-b536-9514269e7f2f.jpeg\" alt=\"\" /><br />\nCOMPACT 行格式示意图</p>\n<ol>\n<li>记录的额外信息</li>\n</ol>\n<p>这部分信息是服务器为了更好地管理记录而不得不额外添加的一些信息。这些额外信息分为 3 个部分，分别是变长字段长度列表、NULL 值列表和记录头信息。</p>\n<ol>\n<li>变长字段长度列表</li>\n</ol>\n<p>mysql 支持一些变长的数据类型，比如 VARCHAR (M)、VARBINARY (M)、各种 TEXT 类型、各种 BLOB 类型。这些数据类型的列称为变长字段。因为变长字段中存储多少字节的数据是不固定的，所以我们在存储真实数据的时候需要顺便把这些数据占用的字节数也存起来，这样才不至于吧 mysql 服务器高懵逼，所以总结来说这些变长字段占用的存储空间分为两部分：</p>\n<ul>\n<li>真正的数据内容</li>\n<li>该数据占用的字节数</li>\n</ul>\n<p>在 COMPACT 行格式中，所有变长字段的真实数据占用的字节数都存放在记录的开头位置，从而形成一个变长字段长度列表，各边长字段的真实数据占用的字节数按照列的顺序<strong>逆序</strong>存放。<br />\n以 record_format_demo 表中第一条记录来举个例子，因为 record_format_demo 表中的 c1、c2、c4 列都是 VARCHAR (10) 类型的，也就是变长的数据类型所以，所以这 3 个列的值占用的存储空间按字节数都需要保存在记录开头处。看下第一条记录各变长字段内容的长度</p>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>存储内容</th>\n<th>内容长度（十进制表示）</th>\n<th>内容长度（十六进制表示）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>c1</td>\n<td>'aaaa'</td>\n<td>4</td>\n<td>0x04</td>\n</tr>\n<tr>\n<td>c2</td>\n<td>'bbb'</td>\n<td>3</td>\n<td>0x03</td>\n</tr>\n<tr>\n<td>c4</td>\n<td>'d'</td>\n<td>1</td>\n<td>0x01</td>\n</tr>\n</tbody>\n</table>\n<p>因为这些长度值需要按照列的顺序逆序存放，所以最后变长字段长度列表的字节串用十六进制的表示的效果就是：<br />\n01 03 04<br />\n 需要说明的是，这里各个字节之间实际上没有空格，只是为了更好理解罢了。<br />\n把这个字节串组成的变长字段长度列表填入到<strong> COMPACT 行格式示意图</strong>的效果如下图所示。<br />\n<img data-src=\"https://cdn.nlark.com/yuque/0/2022/jpeg/2349795/1654440133176-42270066-4100-4279-b5d7-a42293d33e2d.jpeg\" alt=\"\" /><br />\n第一条记录的存储格式</p>\n<ol start=\"2\">\n<li></li>\n<li>\n<p>记录的真实数据</p>\n</li>\n</ol>\n<hr />\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n",
            "tags": []
        },
        {
            "id": "https://fallingkids.github.io/mysql-note-02/",
            "url": "https://fallingkids.github.io/mysql-note-02/",
            "title": "一周浅谈：Mysql - 字符集和比较规则",
            "date_published": "2022-06-01T14:56:49.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>计算机中实际存储的是二进制数据，是没有办法直接存储字符串的，因此为了存储字符是建立在字符与二进制数据的映射关系之上。建立这个关系，我们首先需要解决两个问题：</p>\n<ul>\n<li>要把哪些字符映射成二进制数据？</li>\n<li>怎么映射？把字符映射成二进制数据叫做编码，将二进制数据映射到字符叫做解码</li>\n</ul>\n<pre><code>'a' -&gt; 00000001 (十六进制0x01)\n'b' -&gt; 00000010 (十六进制0x02)\n'A' -&gt; 00000011 (十六进制0x03)\n'B' -&gt; 00000100 (十六进制0x04)\n</code></pre>\n<p>现在有了我们自己的字符集，我们就可以用二进制表示一些字符串了，例如：</p>\n<ul>\n<li>'bA' -&gt; 0000001000000011 （十六进制 0x0203）</li>\n<li>'baB' -&gt; 000000100000000100000100 （十六进制 0x020104）</li>\n<li>'cd' -&gt; 无法表示，因为 huyizhou 字符集里不包含 'c' 和 'd'</li>\n</ul>\n<hr />\n<h2 id=\"字符比较规则\"><a class=\"anchor\" href=\"#字符比较规则\">#</a> 字符比较规则</h2>\n<p>其实字符的比较，最容易想到的就是比较两个字符对应的二进制编码大小。二进制比较规则景观很简单，但是有时候并不符合现实的需求。例如，在很多场景下，英文字符都是不区分大小写的，换句话说 'a' 和 'A' 是相等的，这个时候就不能简单的使用二进制比较，这个时候就需要这两个规则：</p>\n<ul>\n<li>将两个大小写不同的字符全部都转为大写或者小写</li>\n<li>再比较这两个字符对应的二进制数据</li>\n</ul>\n<hr />\n<h2 id=\"常见的字符集\"><a class=\"anchor\" href=\"#常见的字符集\">#</a> 常见的字符集</h2>\n<ul>\n<li>ASCII 字符集：共收录 128 个字符，包括空格、标点符号、数字、大小写字母和一些不可见的字符。由于 ASCII 字符集一共也才 128 个字符，所以可以使用一个字节来进行编码</li>\n</ul>\n<pre><code>'L' -&gt; 01001100 （十六进制0x4C，十进制76）\n'M' -&gt; 01001101 （十六进制0x4D，十进制77）\n</code></pre>\n<ul>\n<li>ISO 8859-1 字符集：共收录 256 个字符，在 ASCII 字符集的基础上又扩充了 128 个西欧常用字符，因此 ISO 8859-1 字符集也可以使用一个字节来进行编码</li>\n<li>GBK</li>\n<li>UTF-8</li>\n</ul>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "https://fallingkids.github.io/mysql-note-01/",
            "url": "https://fallingkids.github.io/mysql-note-01/",
            "title": "一周浅谈：Mysql整体架构设计",
            "date_published": "2022-06-01T02:50:55.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>最近刚开始再看《Mysql 是怎样运行的 -- 从根儿上理解 MySQL》，迫于见明的压力，在此开始写一些笔记也好或者对于该书获取的一些知识点提炼出来</p>\n<hr />\n<h2 id=\"架构图\"><a class=\"anchor\" href=\"#架构图\">#</a> 架构图</h2>\n<p><img data-src=\"https://res.cloudinary.com/https-fallingkids-github-io/image/upload/v1654054743/blog/2022-06-01/image_qvugqu.png\" alt=\"image.png\" /></p>\n<ol>\n<li>建立连接</li>\n</ol>\n<p>就跟大部分的开源组件的模式一样，client 和 server。client 具体为 api，在不同的应用方进行调用；server 具体实现业务如存储，查询，分词等一些逻辑。当然，client 与 server 之间的连接是有通过我们熟悉的 tcp 连接，还有命名管道和共享内存，UNIX 域套接字</p>\n<ol start=\"2\">\n<li>解析与优化</li>\n</ol>\n<p>mysql 服务器从客户端那获得了文本形式的请求，接下来数据要从存储中取出来，还需要很多前置的过程，比如：要取什么数据（对于 sql 语句需要做出分析传递给下一层），怎么取是最快，这部分做这件事情</p>\n<ol start=\"3\">\n<li>存储引擎</li>\n</ol>\n<p>当服务完成了查询优化以后，都还没有真正地去访问真实的表中数据（在查询期间可能会访问表中少量的数据）。因此，mysql 服务器把数据的存储和提取操作都封装到存储引擎模块（表处理器）中。从逻辑上，表示一行一行的记录组成。在物理上，如何表示记录，怎么读取记录，把数据写入具体的物理存储器，这些都存储引擎负责的事情。同时存储引擎是各种各样的，可以根据用户自己选择去使用，因此作为开发者的我们可以自己开发一套存储引擎去使用</p>\n<hr />\n<h2 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h2>\n<ol>\n<li>TCP/IP</li>\n</ol>\n<p>在真实的环境中，数据库服务器进程和客户端进程可能会运行在不同的主机中，因此必须网络进行通讯。mysql 服务器中默认的端口号是 3306，默认监听 3306 端口。因此我们就可以通过 IP 地址 + 端口号的方式与这个进程建立连接，这样进程间就可以进行网络通讯。下面一些关于网络连接用到的指令</p>\n<pre><code>mysqld -P3307\n</code></pre>\n<pre><code>mysql -h127.0.0.1 -uroot -P3307 -p\n</code></pre>\n<ol start=\"2\">\n<li>命名管道和共享内存</li>\n</ol>\n<p>windows 用户可以用这招，我就不细了解</p>\n<ol start=\"3\">\n<li>UNIX 域套接字</li>\n</ol>\n<p>服务器进程和客户端进程都运行在操作系统为类 UNIX 的同一台机器上，就可以使用这个方法进行进程间通讯。不细聊了</p>\n<hr />\n<h2 id=\"连接管理\"><a class=\"anchor\" href=\"#连接管理\">#</a> 连接管理</h2>\n<ul>\n<li>线程池</li>\n</ul>\n<p>当每有一个客户端进程连接到服务器进程时，服务器进程都会创建一个线程专门处理这个客户端的交互：当该客户端退出时会与服务器断开连接，服务器并不会直接把和客户端交互建立起来的线程销毁，而是把他缓存起来，当另一个新的客户端再进行连接时，把这个缓存的线程分配给新客户端。这样就避免了频繁创建和销毁线程，节省开销。mysql 服务器是为每一个进来的客户端分配一个线程，这样的问题就会有，加入线程分配的太多就会严重影响系统性能，所以我们也需要限制可以同时连接到服务器的客户端数量，也就是我们日常口中经常提到的连接池，mysql 也把这个字段开放出来，让我们来配置，因此这个配置的数值很考验开发者对我们的机器资源以及需要什么样的性能要有一个很深刻的理解。</p>\n<ul>\n<li>身份认证</li>\n</ul>\n<p>当客户端发起连接时，是会携带主机信息、用户名、密码等信息，服务器程序就会对客户端提供的这些信息进行认证。如果认证失败，服务器就会拒绝连接。同时，当客户端与服务器是部署在不同的地方，可以采用传输层安全性协议对连接进行加密</p>\n<h2 id=\"解析与优化\"><a class=\"anchor\" href=\"#解析与优化\">#</a> 解析与优化</h2>\n<ol>\n<li>查询缓存（5.7.20 以后不推荐使用，8.0 中直接将其删除）</li>\n</ol>\n<p>我在平时开发的过程中，当缓存中没有数据时，一次数据获取都从调用 BI 的数据接口来获取。但是为了提高效率，会把刚刚查询的结果放入缓存中，这样在短时间内再查询一次就能提高查询的效率，不需要做过多的计算。mysql 也是如此，但是 mysql 对于两个查询请求有任何字符上面的不同（例如，空格、注释、大小写），都会导致缓存不会命中。另外，查询中包含某些函数、用户自定义变量和函数、系统表，如 mysql、information_schema、performance_schema 数据库中的表，这个请求也不会命中。当然，缓存也会有缓存失效的时候，只要表的结构或者发生了更改或者数据发生了修改，对应的所有缓存表全部失效</p>\n<ol start=\"2\">\n<li>语法解析</li>\n</ol>\n<p>我们知道客户端程序发送过来的请求指示一段文本，mysql 服务器首先要对这段文本进行分析。属于编译过程了，设计词法解析、语法解析、语义分析，不深聊了</p>\n<ol start=\"3\">\n<li>\n<p>查询优化</p>\n<p>语法解析之后，服务器已经获得了需要的信息（要查询的表和列是哪些、搜索条件是什么）。但是我们写的 mysql 语句执行起来效率可能并不是那么高，所以 mysql 的优化程序会对我们的语句做一些优化，优化结果就是生成一个执行计划（explain），这个执行计划表明了应该用哪些索引执行查询，以及表之间额查询顺序是啥，等等。</p>\n</li>\n</ol>\n<hr />\n<h2 id=\"存储引擎\"><a class=\"anchor\" href=\"#存储引擎\">#</a> 存储引擎</h2>\n<p>mysql 服务器把数据的存储和提取操作都封装到了一个名为存储引擎的模块中，mysql 中有很多存储引擎，但是最常用的还是 InnoDB，偶尔用一下 MyISAM，再偶尔用一下 MEMORY</p>\n<ul>\n<li>InnoDB</li>\n</ul>\n<p>支持事务、行级别、外键</p>\n<ul>\n<li>MyISAM</li>\n</ul>\n<p>主要的非事务处理存储引擎</p>\n<ul>\n<li>MEMORY</li>\n</ul>\n<p>数据只存储在内存，不存储在磁盘；多用于临时表</p>\n<hr />\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<p>本来想写第二章的内容，启动选项和系统变量，但是发现感觉不是很有必要，后面有必要再补上</p>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "https://fallingkids.github.io/hello-world/",
            "url": "https://fallingkids.github.io/hello-world/",
            "title": "Hello World",
            "date_published": "2022-05-31T07:28:50.131Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}